//------------------------------------------------------------------------------
// <auto-generated>
//     Este código fue generado por una herramienta.
//     Versión de runtime:4.0.30319.42000
//
//     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
//     se vuelve a generar el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Intranet.ServiceReference1 {
    using System.Data;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.WebService1Soap")]
    public interface WebService1Soap {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ListarPaciente", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet ListarPaciente();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ListarPaciente", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataSet> ListarPacienteAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/AgregarPaciente", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string[] AgregarPaciente(string idPaciente, string nombre, string apellidoPaterno, string apellidoMaterno, string dni, string edad, string sexo, string fechaNacimiento, string estadoCivil, string ocupacion, string direccion, string telefono, string fechaIngreso);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/AgregarPaciente", ReplyAction="*")]
        System.Threading.Tasks.Task<string[]> AgregarPacienteAsync(string idPaciente, string nombre, string apellidoPaterno, string apellidoMaterno, string dni, string edad, string sexo, string fechaNacimiento, string estadoCivil, string ocupacion, string direccion, string telefono, string fechaIngreso);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/EliminarPaciente", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string[] EliminarPaciente(string idPaciente);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/EliminarPaciente", ReplyAction="*")]
        System.Threading.Tasks.Task<string[]> EliminarPacienteAsync(string idPaciente);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/BuscarPaciente", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet BuscarPaciente(string idPaciente);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/BuscarPaciente", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataSet> BuscarPacienteAsync(string idPaciente);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ActualizarPaciente", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string[] ActualizarPaciente(string idPaciente, string nombre, string apellidoPaterno, string apellidoMaterno, string dni, string edad, string sexo, string fechaNacimiento, string estadoCivil, string ocupacion, string direccion, string telefono, string fechaIngreso);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ActualizarPaciente", ReplyAction="*")]
        System.Threading.Tasks.Task<string[]> ActualizarPacienteAsync(string idPaciente, string nombre, string apellidoPaterno, string apellidoMaterno, string dni, string edad, string sexo, string fechaNacimiento, string estadoCivil, string ocupacion, string direccion, string telefono, string fechaIngreso);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ListarHospital", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet ListarHospital();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ListarHospital", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataSet> ListarHospitalAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/AgregarHospitales", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string[] AgregarHospitales(string idHo, string nombreHospital, string direccion);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/AgregarHospitales", ReplyAction="*")]
        System.Threading.Tasks.Task<string[]> AgregarHospitalesAsync(string idHo, string nombreHospital, string direccion);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/EliminarHospital", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string[] EliminarHospital(string idHo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/EliminarHospital", ReplyAction="*")]
        System.Threading.Tasks.Task<string[]> EliminarHospitalAsync(string idHo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/BuscarHospital", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet BuscarHospital(string idHo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/BuscarHospital", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataSet> BuscarHospitalAsync(string idHo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ActualizarHospitales", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string[] ActualizarHospitales(string idHo, string nombreHospital, string direccion);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ActualizarHospitales", ReplyAction="*")]
        System.Threading.Tasks.Task<string[]> ActualizarHospitalesAsync(string idHo, string nombreHospital, string direccion);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ListarHistorias", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet ListarHistorias();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ListarHistorias", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataSet> ListarHistoriasAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/AgregarHistorias", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string[] AgregarHistorias(
                    string idHistoria, 
                    string peso, 
                    string talla, 
                    string motivo, 
                    string sintomas, 
                    string adicciones, 
                    string motivoConsulta, 
                    string idPaciente, 
                    string idDoctor, 
                    string idUsuario, 
                    string idHospital, 
                    string idAntecedentesP, 
                    string idAntecedentesF, 
                    string idAntecedentesQ, 
                    string codDiagnostico, 
                    string fechaRegistro);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/AgregarHistorias", ReplyAction="*")]
        System.Threading.Tasks.Task<string[]> AgregarHistoriasAsync(
                    string idHistoria, 
                    string peso, 
                    string talla, 
                    string motivo, 
                    string sintomas, 
                    string adicciones, 
                    string motivoConsulta, 
                    string idPaciente, 
                    string idDoctor, 
                    string idUsuario, 
                    string idHospital, 
                    string idAntecedentesP, 
                    string idAntecedentesF, 
                    string idAntecedentesQ, 
                    string codDiagnostico, 
                    string fechaRegistro);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/EliminarHistoria", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string[] EliminarHistoria(string idHistoria);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/EliminarHistoria", ReplyAction="*")]
        System.Threading.Tasks.Task<string[]> EliminarHistoriaAsync(string idHistoria);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/BuscarHistoria", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet BuscarHistoria(string idHistoria);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/BuscarHistoria", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataSet> BuscarHistoriaAsync(string idHistoria);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ActualizarHistorias", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string[] ActualizarHistorias(
                    string idHistoria, 
                    string peso, 
                    string talla, 
                    string motivo, 
                    string sintomas, 
                    string adicciones, 
                    string motivoConsulta, 
                    string idPaciente, 
                    string idDoctor, 
                    string idUsuario, 
                    string idHospital, 
                    string idAntecedentesP, 
                    string idAntecedentesF, 
                    string idAntecedentesQ, 
                    string codDiagnostico, 
                    string fechaRegistro);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ActualizarHistorias", ReplyAction="*")]
        System.Threading.Tasks.Task<string[]> ActualizarHistoriasAsync(
                    string idHistoria, 
                    string peso, 
                    string talla, 
                    string motivo, 
                    string sintomas, 
                    string adicciones, 
                    string motivoConsulta, 
                    string idPaciente, 
                    string idDoctor, 
                    string idUsuario, 
                    string idHospital, 
                    string idAntecedentesP, 
                    string idAntecedentesF, 
                    string idAntecedentesQ, 
                    string codDiagnostico, 
                    string fechaRegistro);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ListarUsuarios", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet ListarUsuarios();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ListarUsuarios", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataSet> ListarUsuariosAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/AgregarUsuario", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string[] AgregarUsuario(string idUsuario, string usuario, string contrasenia);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/AgregarUsuario", ReplyAction="*")]
        System.Threading.Tasks.Task<string[]> AgregarUsuarioAsync(string idUsuario, string usuario, string contrasenia);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/EliminarUsuario", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string[] EliminarUsuario(string idUsuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/EliminarUsuario", ReplyAction="*")]
        System.Threading.Tasks.Task<string[]> EliminarUsuarioAsync(string idUsuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/BuscarUsuario", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet BuscarUsuario(string idUsuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/BuscarUsuario", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataSet> BuscarUsuarioAsync(string idUsuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ActualizarUsuario", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string[] ActualizarUsuario(string idUsuario, string usuario, string contrasenia);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ActualizarUsuario", ReplyAction="*")]
        System.Threading.Tasks.Task<string[]> ActualizarUsuarioAsync(string idUsuario, string usuario, string contrasenia);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Listardoctor", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet Listardoctor();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Listardoctor", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataSet> ListardoctorAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/AgregarDoctores", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string[] AgregarDoctores(string IDdoctor, string nombre, string apellidoPaterno, string apellidoMaterno, string Especialidad, string direccion, string telefono, string idHospital);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/AgregarDoctores", ReplyAction="*")]
        System.Threading.Tasks.Task<string[]> AgregarDoctoresAsync(string IDdoctor, string nombre, string apellidoPaterno, string apellidoMaterno, string Especialidad, string direccion, string telefono, string idHospital);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/EliminarDoctor", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string[] EliminarDoctor(string idDoctor);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/EliminarDoctor", ReplyAction="*")]
        System.Threading.Tasks.Task<string[]> EliminarDoctorAsync(string idDoctor);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/BuscarDoctor", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet BuscarDoctor(string idDoctor);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/BuscarDoctor", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataSet> BuscarDoctorAsync(string idDoctor);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ActualizarDoctores", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string[] ActualizarDoctores(string IDdoctor, string nombre, string apellidoPaterno, string apellidoMaterno, string Especialidad, string direccion, string telefono, string idHospital);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ActualizarDoctores", ReplyAction="*")]
        System.Threading.Tasks.Task<string[]> ActualizarDoctoresAsync(string IDdoctor, string nombre, string apellidoPaterno, string apellidoMaterno, string Especialidad, string direccion, string telefono, string idHospital);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ListarDiagnostico", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet ListarDiagnostico();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ListarDiagnostico", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataSet> ListarDiagnosticoAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/AgregarDiagnostico", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string[] AgregarDiagnostico(string codDiagnostico, string descripcion);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/AgregarDiagnostico", ReplyAction="*")]
        System.Threading.Tasks.Task<string[]> AgregarDiagnosticoAsync(string codDiagnostico, string descripcion);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/EliminarDiagnostico", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string[] EliminarDiagnostico(string codDiagnostico);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/EliminarDiagnostico", ReplyAction="*")]
        System.Threading.Tasks.Task<string[]> EliminarDiagnosticoAsync(string codDiagnostico);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/BuscarDiagnostico", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet BuscarDiagnostico(string codDiagnostico);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/BuscarDiagnostico", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataSet> BuscarDiagnosticoAsync(string codDiagnostico);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ActualizarDiagnostico", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string[] ActualizarDiagnostico(string codDiagnostico, string descripcion);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ActualizarDiagnostico", ReplyAction="*")]
        System.Threading.Tasks.Task<string[]> ActualizarDiagnosticoAsync(string codDiagnostico, string descripcion);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ListarAntecedentesFamiliares", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet ListarAntecedentesFamiliares();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ListarAntecedentesFamiliares", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataSet> ListarAntecedentesFamiliaresAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/AgregarAntecedentesF", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string[] AgregarAntecedentesF(string idAntecedenteF, string diabetes, string cancer, string tuberculosis, string ipertencion, string sida, string covid, string otrasenfermedades);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/AgregarAntecedentesF", ReplyAction="*")]
        System.Threading.Tasks.Task<string[]> AgregarAntecedentesFAsync(string idAntecedenteF, string diabetes, string cancer, string tuberculosis, string ipertencion, string sida, string covid, string otrasenfermedades);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/EliminarAntecedentesF", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string[] EliminarAntecedentesF(string idAntecedenteF);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/EliminarAntecedentesF", ReplyAction="*")]
        System.Threading.Tasks.Task<string[]> EliminarAntecedentesFAsync(string idAntecedenteF);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/BuscarAntecedentesF", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet BuscarAntecedentesF(string idAntecedenteF);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/BuscarAntecedentesF", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataSet> BuscarAntecedentesFAsync(string idAntecedenteF);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ActualizarAntecedentesF", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string[] ActualizarAntecedentesF(string idAntecedenteF, string diabetes, string cancer, string tuberculosis, string ipertencion, string sida, string covid, string otrasenfermedades);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ActualizarAntecedentesF", ReplyAction="*")]
        System.Threading.Tasks.Task<string[]> ActualizarAntecedentesFAsync(string idAntecedenteF, string diabetes, string cancer, string tuberculosis, string ipertencion, string sida, string covid, string otrasenfermedades);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ListarAntecedentesPersonales", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet ListarAntecedentesPersonales();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ListarAntecedentesPersonales", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataSet> ListarAntecedentesPersonalesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/AgregarAntecedentesP", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string[] AgregarAntecedentesP(string idAntecedenteP, string relacionesSexuales, string edadSexInicio, string sexFrecuencia, string nroParejas, string usasProteccion, string vacunaSarampion, string vacunaViruela, string vacunaRabia, string vacunaFiebreA, string vacunaHepatitis, string otrasVacunas);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/AgregarAntecedentesP", ReplyAction="*")]
        System.Threading.Tasks.Task<string[]> AgregarAntecedentesPAsync(string idAntecedenteP, string relacionesSexuales, string edadSexInicio, string sexFrecuencia, string nroParejas, string usasProteccion, string vacunaSarampion, string vacunaViruela, string vacunaRabia, string vacunaFiebreA, string vacunaHepatitis, string otrasVacunas);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/EliminarAntecedentesP", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string[] EliminarAntecedentesP(string idAntecedenteP);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/EliminarAntecedentesP", ReplyAction="*")]
        System.Threading.Tasks.Task<string[]> EliminarAntecedentesPAsync(string idAntecedenteP);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/BuscarAntecedentesP", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet BuscarAntecedentesP(string idAntecedenteP);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/BuscarAntecedentesP", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataSet> BuscarAntecedentesPAsync(string idAntecedenteP);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ActualizarAntecedentesP", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string[] ActualizarAntecedentesP(string idAntecedenteP, string relacionesSexuales, string edadSexInicio, string sexFrecuencia, string nroParejas, string usasProteccion, string vacunaSarampion, string vacunaViruela, string vacunaRabia, string vacunaFiebreA, string vacunaHepatitis, string otrasVacunas);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ActualizarAntecedentesP", ReplyAction="*")]
        System.Threading.Tasks.Task<string[]> ActualizarAntecedentesPAsync(string idAntecedenteP, string relacionesSexuales, string edadSexInicio, string sexFrecuencia, string nroParejas, string usasProteccion, string vacunaSarampion, string vacunaViruela, string vacunaRabia, string vacunaFiebreA, string vacunaHepatitis, string otrasVacunas);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ListarAntecedentesQuirurjicoss", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet ListarAntecedentesQuirurjicoss();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ListarAntecedentesQuirurjicoss", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataSet> ListarAntecedentesQuirurjicossAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/AgregarAntecedentesQ", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string[] AgregarAntecedentesQ(string idAntecedenteQ, string tuvoIntervencion, string nroVeces, string causaOperacion, string alergias, string queAlergias, string sufreDiabetes, string sufreEpilepsia, string sufreHipertension, string otrasEnfermedades, string medicamentos, string queMedicamento);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/AgregarAntecedentesQ", ReplyAction="*")]
        System.Threading.Tasks.Task<string[]> AgregarAntecedentesQAsync(string idAntecedenteQ, string tuvoIntervencion, string nroVeces, string causaOperacion, string alergias, string queAlergias, string sufreDiabetes, string sufreEpilepsia, string sufreHipertension, string otrasEnfermedades, string medicamentos, string queMedicamento);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/EliminarAntecedentesQ", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string[] EliminarAntecedentesQ(string idAntecedenteQ);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/EliminarAntecedentesQ", ReplyAction="*")]
        System.Threading.Tasks.Task<string[]> EliminarAntecedentesQAsync(string idAntecedenteQ);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/BuscarAntecedentesQ", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet BuscarAntecedentesQ(string idAntecedenteQ);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/BuscarAntecedentesQ", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataSet> BuscarAntecedentesQAsync(string idAntecedenteQ);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ActualizarAntecedentesQ", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string[] ActualizarAntecedentesQ(string idAntecedenteQ, string tuvoIntervencion, string nroVeces, string causaOperacion, string alergias, string queAlergias, string sufreDiabetes, string sufreEpilepsia, string sufreHipertension, string otrasEnfermedades, string medicamentos, string queMedicamento);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ActualizarAntecedentesQ", ReplyAction="*")]
        System.Threading.Tasks.Task<string[]> ActualizarAntecedentesQAsync(string idAntecedenteQ, string tuvoIntervencion, string nroVeces, string causaOperacion, string alergias, string queAlergias, string sufreDiabetes, string sufreEpilepsia, string sufreHipertension, string otrasEnfermedades, string medicamentos, string queMedicamento);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface WebService1SoapChannel : Intranet.ServiceReference1.WebService1Soap, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class WebService1SoapClient : System.ServiceModel.ClientBase<Intranet.ServiceReference1.WebService1Soap>, Intranet.ServiceReference1.WebService1Soap {
        
        public WebService1SoapClient() {
        }
        
        public WebService1SoapClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public WebService1SoapClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public WebService1SoapClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public WebService1SoapClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Data.DataSet ListarPaciente() {
            return base.Channel.ListarPaciente();
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> ListarPacienteAsync() {
            return base.Channel.ListarPacienteAsync();
        }
        
        public string[] AgregarPaciente(string idPaciente, string nombre, string apellidoPaterno, string apellidoMaterno, string dni, string edad, string sexo, string fechaNacimiento, string estadoCivil, string ocupacion, string direccion, string telefono, string fechaIngreso) {
            return base.Channel.AgregarPaciente(idPaciente, nombre, apellidoPaterno, apellidoMaterno, dni, edad, sexo, fechaNacimiento, estadoCivil, ocupacion, direccion, telefono, fechaIngreso);
        }
        
        public System.Threading.Tasks.Task<string[]> AgregarPacienteAsync(string idPaciente, string nombre, string apellidoPaterno, string apellidoMaterno, string dni, string edad, string sexo, string fechaNacimiento, string estadoCivil, string ocupacion, string direccion, string telefono, string fechaIngreso) {
            return base.Channel.AgregarPacienteAsync(idPaciente, nombre, apellidoPaterno, apellidoMaterno, dni, edad, sexo, fechaNacimiento, estadoCivil, ocupacion, direccion, telefono, fechaIngreso);
        }
        
        public string[] EliminarPaciente(string idPaciente) {
            return base.Channel.EliminarPaciente(idPaciente);
        }
        
        public System.Threading.Tasks.Task<string[]> EliminarPacienteAsync(string idPaciente) {
            return base.Channel.EliminarPacienteAsync(idPaciente);
        }
        
        public System.Data.DataSet BuscarPaciente(string idPaciente) {
            return base.Channel.BuscarPaciente(idPaciente);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> BuscarPacienteAsync(string idPaciente) {
            return base.Channel.BuscarPacienteAsync(idPaciente);
        }
        
        public string[] ActualizarPaciente(string idPaciente, string nombre, string apellidoPaterno, string apellidoMaterno, string dni, string edad, string sexo, string fechaNacimiento, string estadoCivil, string ocupacion, string direccion, string telefono, string fechaIngreso) {
            return base.Channel.ActualizarPaciente(idPaciente, nombre, apellidoPaterno, apellidoMaterno, dni, edad, sexo, fechaNacimiento, estadoCivil, ocupacion, direccion, telefono, fechaIngreso);
        }
        
        public System.Threading.Tasks.Task<string[]> ActualizarPacienteAsync(string idPaciente, string nombre, string apellidoPaterno, string apellidoMaterno, string dni, string edad, string sexo, string fechaNacimiento, string estadoCivil, string ocupacion, string direccion, string telefono, string fechaIngreso) {
            return base.Channel.ActualizarPacienteAsync(idPaciente, nombre, apellidoPaterno, apellidoMaterno, dni, edad, sexo, fechaNacimiento, estadoCivil, ocupacion, direccion, telefono, fechaIngreso);
        }
        
        public System.Data.DataSet ListarHospital() {
            return base.Channel.ListarHospital();
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> ListarHospitalAsync() {
            return base.Channel.ListarHospitalAsync();
        }
        
        public string[] AgregarHospitales(string idHo, string nombreHospital, string direccion) {
            return base.Channel.AgregarHospitales(idHo, nombreHospital, direccion);
        }
        
        public System.Threading.Tasks.Task<string[]> AgregarHospitalesAsync(string idHo, string nombreHospital, string direccion) {
            return base.Channel.AgregarHospitalesAsync(idHo, nombreHospital, direccion);
        }
        
        public string[] EliminarHospital(string idHo) {
            return base.Channel.EliminarHospital(idHo);
        }
        
        public System.Threading.Tasks.Task<string[]> EliminarHospitalAsync(string idHo) {
            return base.Channel.EliminarHospitalAsync(idHo);
        }
        
        public System.Data.DataSet BuscarHospital(string idHo) {
            return base.Channel.BuscarHospital(idHo);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> BuscarHospitalAsync(string idHo) {
            return base.Channel.BuscarHospitalAsync(idHo);
        }
        
        public string[] ActualizarHospitales(string idHo, string nombreHospital, string direccion) {
            return base.Channel.ActualizarHospitales(idHo, nombreHospital, direccion);
        }
        
        public System.Threading.Tasks.Task<string[]> ActualizarHospitalesAsync(string idHo, string nombreHospital, string direccion) {
            return base.Channel.ActualizarHospitalesAsync(idHo, nombreHospital, direccion);
        }
        
        public System.Data.DataSet ListarHistorias() {
            return base.Channel.ListarHistorias();
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> ListarHistoriasAsync() {
            return base.Channel.ListarHistoriasAsync();
        }
        
        public string[] AgregarHistorias(
                    string idHistoria, 
                    string peso, 
                    string talla, 
                    string motivo, 
                    string sintomas, 
                    string adicciones, 
                    string motivoConsulta, 
                    string idPaciente, 
                    string idDoctor, 
                    string idUsuario, 
                    string idHospital, 
                    string idAntecedentesP, 
                    string idAntecedentesF, 
                    string idAntecedentesQ, 
                    string codDiagnostico, 
                    string fechaRegistro) {
            return base.Channel.AgregarHistorias(idHistoria, peso, talla, motivo, sintomas, adicciones, motivoConsulta, idPaciente, idDoctor, idUsuario, idHospital, idAntecedentesP, idAntecedentesF, idAntecedentesQ, codDiagnostico, fechaRegistro);
        }
        
        public System.Threading.Tasks.Task<string[]> AgregarHistoriasAsync(
                    string idHistoria, 
                    string peso, 
                    string talla, 
                    string motivo, 
                    string sintomas, 
                    string adicciones, 
                    string motivoConsulta, 
                    string idPaciente, 
                    string idDoctor, 
                    string idUsuario, 
                    string idHospital, 
                    string idAntecedentesP, 
                    string idAntecedentesF, 
                    string idAntecedentesQ, 
                    string codDiagnostico, 
                    string fechaRegistro) {
            return base.Channel.AgregarHistoriasAsync(idHistoria, peso, talla, motivo, sintomas, adicciones, motivoConsulta, idPaciente, idDoctor, idUsuario, idHospital, idAntecedentesP, idAntecedentesF, idAntecedentesQ, codDiagnostico, fechaRegistro);
        }
        
        public string[] EliminarHistoria(string idHistoria) {
            return base.Channel.EliminarHistoria(idHistoria);
        }
        
        public System.Threading.Tasks.Task<string[]> EliminarHistoriaAsync(string idHistoria) {
            return base.Channel.EliminarHistoriaAsync(idHistoria);
        }
        
        public System.Data.DataSet BuscarHistoria(string idHistoria) {
            return base.Channel.BuscarHistoria(idHistoria);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> BuscarHistoriaAsync(string idHistoria) {
            return base.Channel.BuscarHistoriaAsync(idHistoria);
        }
        
        public string[] ActualizarHistorias(
                    string idHistoria, 
                    string peso, 
                    string talla, 
                    string motivo, 
                    string sintomas, 
                    string adicciones, 
                    string motivoConsulta, 
                    string idPaciente, 
                    string idDoctor, 
                    string idUsuario, 
                    string idHospital, 
                    string idAntecedentesP, 
                    string idAntecedentesF, 
                    string idAntecedentesQ, 
                    string codDiagnostico, 
                    string fechaRegistro) {
            return base.Channel.ActualizarHistorias(idHistoria, peso, talla, motivo, sintomas, adicciones, motivoConsulta, idPaciente, idDoctor, idUsuario, idHospital, idAntecedentesP, idAntecedentesF, idAntecedentesQ, codDiagnostico, fechaRegistro);
        }
        
        public System.Threading.Tasks.Task<string[]> ActualizarHistoriasAsync(
                    string idHistoria, 
                    string peso, 
                    string talla, 
                    string motivo, 
                    string sintomas, 
                    string adicciones, 
                    string motivoConsulta, 
                    string idPaciente, 
                    string idDoctor, 
                    string idUsuario, 
                    string idHospital, 
                    string idAntecedentesP, 
                    string idAntecedentesF, 
                    string idAntecedentesQ, 
                    string codDiagnostico, 
                    string fechaRegistro) {
            return base.Channel.ActualizarHistoriasAsync(idHistoria, peso, talla, motivo, sintomas, adicciones, motivoConsulta, idPaciente, idDoctor, idUsuario, idHospital, idAntecedentesP, idAntecedentesF, idAntecedentesQ, codDiagnostico, fechaRegistro);
        }
        
        public System.Data.DataSet ListarUsuarios() {
            return base.Channel.ListarUsuarios();
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> ListarUsuariosAsync() {
            return base.Channel.ListarUsuariosAsync();
        }
        
        public string[] AgregarUsuario(string idUsuario, string usuario, string contrasenia) {
            return base.Channel.AgregarUsuario(idUsuario, usuario, contrasenia);
        }
        
        public System.Threading.Tasks.Task<string[]> AgregarUsuarioAsync(string idUsuario, string usuario, string contrasenia) {
            return base.Channel.AgregarUsuarioAsync(idUsuario, usuario, contrasenia);
        }
        
        public string[] EliminarUsuario(string idUsuario) {
            return base.Channel.EliminarUsuario(idUsuario);
        }
        
        public System.Threading.Tasks.Task<string[]> EliminarUsuarioAsync(string idUsuario) {
            return base.Channel.EliminarUsuarioAsync(idUsuario);
        }
        
        public System.Data.DataSet BuscarUsuario(string idUsuario) {
            return base.Channel.BuscarUsuario(idUsuario);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> BuscarUsuarioAsync(string idUsuario) {
            return base.Channel.BuscarUsuarioAsync(idUsuario);
        }
        
        public string[] ActualizarUsuario(string idUsuario, string usuario, string contrasenia) {
            return base.Channel.ActualizarUsuario(idUsuario, usuario, contrasenia);
        }
        
        public System.Threading.Tasks.Task<string[]> ActualizarUsuarioAsync(string idUsuario, string usuario, string contrasenia) {
            return base.Channel.ActualizarUsuarioAsync(idUsuario, usuario, contrasenia);
        }
        
        public System.Data.DataSet Listardoctor() {
            return base.Channel.Listardoctor();
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> ListardoctorAsync() {
            return base.Channel.ListardoctorAsync();
        }
        
        public string[] AgregarDoctores(string IDdoctor, string nombre, string apellidoPaterno, string apellidoMaterno, string Especialidad, string direccion, string telefono, string idHospital) {
            return base.Channel.AgregarDoctores(IDdoctor, nombre, apellidoPaterno, apellidoMaterno, Especialidad, direccion, telefono, idHospital);
        }
        
        public System.Threading.Tasks.Task<string[]> AgregarDoctoresAsync(string IDdoctor, string nombre, string apellidoPaterno, string apellidoMaterno, string Especialidad, string direccion, string telefono, string idHospital) {
            return base.Channel.AgregarDoctoresAsync(IDdoctor, nombre, apellidoPaterno, apellidoMaterno, Especialidad, direccion, telefono, idHospital);
        }
        
        public string[] EliminarDoctor(string idDoctor) {
            return base.Channel.EliminarDoctor(idDoctor);
        }
        
        public System.Threading.Tasks.Task<string[]> EliminarDoctorAsync(string idDoctor) {
            return base.Channel.EliminarDoctorAsync(idDoctor);
        }
        
        public System.Data.DataSet BuscarDoctor(string idDoctor) {
            return base.Channel.BuscarDoctor(idDoctor);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> BuscarDoctorAsync(string idDoctor) {
            return base.Channel.BuscarDoctorAsync(idDoctor);
        }
        
        public string[] ActualizarDoctores(string IDdoctor, string nombre, string apellidoPaterno, string apellidoMaterno, string Especialidad, string direccion, string telefono, string idHospital) {
            return base.Channel.ActualizarDoctores(IDdoctor, nombre, apellidoPaterno, apellidoMaterno, Especialidad, direccion, telefono, idHospital);
        }
        
        public System.Threading.Tasks.Task<string[]> ActualizarDoctoresAsync(string IDdoctor, string nombre, string apellidoPaterno, string apellidoMaterno, string Especialidad, string direccion, string telefono, string idHospital) {
            return base.Channel.ActualizarDoctoresAsync(IDdoctor, nombre, apellidoPaterno, apellidoMaterno, Especialidad, direccion, telefono, idHospital);
        }
        
        public System.Data.DataSet ListarDiagnostico() {
            return base.Channel.ListarDiagnostico();
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> ListarDiagnosticoAsync() {
            return base.Channel.ListarDiagnosticoAsync();
        }
        
        public string[] AgregarDiagnostico(string codDiagnostico, string descripcion) {
            return base.Channel.AgregarDiagnostico(codDiagnostico, descripcion);
        }
        
        public System.Threading.Tasks.Task<string[]> AgregarDiagnosticoAsync(string codDiagnostico, string descripcion) {
            return base.Channel.AgregarDiagnosticoAsync(codDiagnostico, descripcion);
        }
        
        public string[] EliminarDiagnostico(string codDiagnostico) {
            return base.Channel.EliminarDiagnostico(codDiagnostico);
        }
        
        public System.Threading.Tasks.Task<string[]> EliminarDiagnosticoAsync(string codDiagnostico) {
            return base.Channel.EliminarDiagnosticoAsync(codDiagnostico);
        }
        
        public System.Data.DataSet BuscarDiagnostico(string codDiagnostico) {
            return base.Channel.BuscarDiagnostico(codDiagnostico);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> BuscarDiagnosticoAsync(string codDiagnostico) {
            return base.Channel.BuscarDiagnosticoAsync(codDiagnostico);
        }
        
        public string[] ActualizarDiagnostico(string codDiagnostico, string descripcion) {
            return base.Channel.ActualizarDiagnostico(codDiagnostico, descripcion);
        }
        
        public System.Threading.Tasks.Task<string[]> ActualizarDiagnosticoAsync(string codDiagnostico, string descripcion) {
            return base.Channel.ActualizarDiagnosticoAsync(codDiagnostico, descripcion);
        }
        
        public System.Data.DataSet ListarAntecedentesFamiliares() {
            return base.Channel.ListarAntecedentesFamiliares();
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> ListarAntecedentesFamiliaresAsync() {
            return base.Channel.ListarAntecedentesFamiliaresAsync();
        }
        
        public string[] AgregarAntecedentesF(string idAntecedenteF, string diabetes, string cancer, string tuberculosis, string ipertencion, string sida, string covid, string otrasenfermedades) {
            return base.Channel.AgregarAntecedentesF(idAntecedenteF, diabetes, cancer, tuberculosis, ipertencion, sida, covid, otrasenfermedades);
        }
        
        public System.Threading.Tasks.Task<string[]> AgregarAntecedentesFAsync(string idAntecedenteF, string diabetes, string cancer, string tuberculosis, string ipertencion, string sida, string covid, string otrasenfermedades) {
            return base.Channel.AgregarAntecedentesFAsync(idAntecedenteF, diabetes, cancer, tuberculosis, ipertencion, sida, covid, otrasenfermedades);
        }
        
        public string[] EliminarAntecedentesF(string idAntecedenteF) {
            return base.Channel.EliminarAntecedentesF(idAntecedenteF);
        }
        
        public System.Threading.Tasks.Task<string[]> EliminarAntecedentesFAsync(string idAntecedenteF) {
            return base.Channel.EliminarAntecedentesFAsync(idAntecedenteF);
        }
        
        public System.Data.DataSet BuscarAntecedentesF(string idAntecedenteF) {
            return base.Channel.BuscarAntecedentesF(idAntecedenteF);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> BuscarAntecedentesFAsync(string idAntecedenteF) {
            return base.Channel.BuscarAntecedentesFAsync(idAntecedenteF);
        }
        
        public string[] ActualizarAntecedentesF(string idAntecedenteF, string diabetes, string cancer, string tuberculosis, string ipertencion, string sida, string covid, string otrasenfermedades) {
            return base.Channel.ActualizarAntecedentesF(idAntecedenteF, diabetes, cancer, tuberculosis, ipertencion, sida, covid, otrasenfermedades);
        }
        
        public System.Threading.Tasks.Task<string[]> ActualizarAntecedentesFAsync(string idAntecedenteF, string diabetes, string cancer, string tuberculosis, string ipertencion, string sida, string covid, string otrasenfermedades) {
            return base.Channel.ActualizarAntecedentesFAsync(idAntecedenteF, diabetes, cancer, tuberculosis, ipertencion, sida, covid, otrasenfermedades);
        }
        
        public System.Data.DataSet ListarAntecedentesPersonales() {
            return base.Channel.ListarAntecedentesPersonales();
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> ListarAntecedentesPersonalesAsync() {
            return base.Channel.ListarAntecedentesPersonalesAsync();
        }
        
        public string[] AgregarAntecedentesP(string idAntecedenteP, string relacionesSexuales, string edadSexInicio, string sexFrecuencia, string nroParejas, string usasProteccion, string vacunaSarampion, string vacunaViruela, string vacunaRabia, string vacunaFiebreA, string vacunaHepatitis, string otrasVacunas) {
            return base.Channel.AgregarAntecedentesP(idAntecedenteP, relacionesSexuales, edadSexInicio, sexFrecuencia, nroParejas, usasProteccion, vacunaSarampion, vacunaViruela, vacunaRabia, vacunaFiebreA, vacunaHepatitis, otrasVacunas);
        }
        
        public System.Threading.Tasks.Task<string[]> AgregarAntecedentesPAsync(string idAntecedenteP, string relacionesSexuales, string edadSexInicio, string sexFrecuencia, string nroParejas, string usasProteccion, string vacunaSarampion, string vacunaViruela, string vacunaRabia, string vacunaFiebreA, string vacunaHepatitis, string otrasVacunas) {
            return base.Channel.AgregarAntecedentesPAsync(idAntecedenteP, relacionesSexuales, edadSexInicio, sexFrecuencia, nroParejas, usasProteccion, vacunaSarampion, vacunaViruela, vacunaRabia, vacunaFiebreA, vacunaHepatitis, otrasVacunas);
        }
        
        public string[] EliminarAntecedentesP(string idAntecedenteP) {
            return base.Channel.EliminarAntecedentesP(idAntecedenteP);
        }
        
        public System.Threading.Tasks.Task<string[]> EliminarAntecedentesPAsync(string idAntecedenteP) {
            return base.Channel.EliminarAntecedentesPAsync(idAntecedenteP);
        }
        
        public System.Data.DataSet BuscarAntecedentesP(string idAntecedenteP) {
            return base.Channel.BuscarAntecedentesP(idAntecedenteP);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> BuscarAntecedentesPAsync(string idAntecedenteP) {
            return base.Channel.BuscarAntecedentesPAsync(idAntecedenteP);
        }
        
        public string[] ActualizarAntecedentesP(string idAntecedenteP, string relacionesSexuales, string edadSexInicio, string sexFrecuencia, string nroParejas, string usasProteccion, string vacunaSarampion, string vacunaViruela, string vacunaRabia, string vacunaFiebreA, string vacunaHepatitis, string otrasVacunas) {
            return base.Channel.ActualizarAntecedentesP(idAntecedenteP, relacionesSexuales, edadSexInicio, sexFrecuencia, nroParejas, usasProteccion, vacunaSarampion, vacunaViruela, vacunaRabia, vacunaFiebreA, vacunaHepatitis, otrasVacunas);
        }
        
        public System.Threading.Tasks.Task<string[]> ActualizarAntecedentesPAsync(string idAntecedenteP, string relacionesSexuales, string edadSexInicio, string sexFrecuencia, string nroParejas, string usasProteccion, string vacunaSarampion, string vacunaViruela, string vacunaRabia, string vacunaFiebreA, string vacunaHepatitis, string otrasVacunas) {
            return base.Channel.ActualizarAntecedentesPAsync(idAntecedenteP, relacionesSexuales, edadSexInicio, sexFrecuencia, nroParejas, usasProteccion, vacunaSarampion, vacunaViruela, vacunaRabia, vacunaFiebreA, vacunaHepatitis, otrasVacunas);
        }
        
        public System.Data.DataSet ListarAntecedentesQuirurjicoss() {
            return base.Channel.ListarAntecedentesQuirurjicoss();
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> ListarAntecedentesQuirurjicossAsync() {
            return base.Channel.ListarAntecedentesQuirurjicossAsync();
        }
        
        public string[] AgregarAntecedentesQ(string idAntecedenteQ, string tuvoIntervencion, string nroVeces, string causaOperacion, string alergias, string queAlergias, string sufreDiabetes, string sufreEpilepsia, string sufreHipertension, string otrasEnfermedades, string medicamentos, string queMedicamento) {
            return base.Channel.AgregarAntecedentesQ(idAntecedenteQ, tuvoIntervencion, nroVeces, causaOperacion, alergias, queAlergias, sufreDiabetes, sufreEpilepsia, sufreHipertension, otrasEnfermedades, medicamentos, queMedicamento);
        }
        
        public System.Threading.Tasks.Task<string[]> AgregarAntecedentesQAsync(string idAntecedenteQ, string tuvoIntervencion, string nroVeces, string causaOperacion, string alergias, string queAlergias, string sufreDiabetes, string sufreEpilepsia, string sufreHipertension, string otrasEnfermedades, string medicamentos, string queMedicamento) {
            return base.Channel.AgregarAntecedentesQAsync(idAntecedenteQ, tuvoIntervencion, nroVeces, causaOperacion, alergias, queAlergias, sufreDiabetes, sufreEpilepsia, sufreHipertension, otrasEnfermedades, medicamentos, queMedicamento);
        }
        
        public string[] EliminarAntecedentesQ(string idAntecedenteQ) {
            return base.Channel.EliminarAntecedentesQ(idAntecedenteQ);
        }
        
        public System.Threading.Tasks.Task<string[]> EliminarAntecedentesQAsync(string idAntecedenteQ) {
            return base.Channel.EliminarAntecedentesQAsync(idAntecedenteQ);
        }
        
        public System.Data.DataSet BuscarAntecedentesQ(string idAntecedenteQ) {
            return base.Channel.BuscarAntecedentesQ(idAntecedenteQ);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> BuscarAntecedentesQAsync(string idAntecedenteQ) {
            return base.Channel.BuscarAntecedentesQAsync(idAntecedenteQ);
        }
        
        public string[] ActualizarAntecedentesQ(string idAntecedenteQ, string tuvoIntervencion, string nroVeces, string causaOperacion, string alergias, string queAlergias, string sufreDiabetes, string sufreEpilepsia, string sufreHipertension, string otrasEnfermedades, string medicamentos, string queMedicamento) {
            return base.Channel.ActualizarAntecedentesQ(idAntecedenteQ, tuvoIntervencion, nroVeces, causaOperacion, alergias, queAlergias, sufreDiabetes, sufreEpilepsia, sufreHipertension, otrasEnfermedades, medicamentos, queMedicamento);
        }
        
        public System.Threading.Tasks.Task<string[]> ActualizarAntecedentesQAsync(string idAntecedenteQ, string tuvoIntervencion, string nroVeces, string causaOperacion, string alergias, string queAlergias, string sufreDiabetes, string sufreEpilepsia, string sufreHipertension, string otrasEnfermedades, string medicamentos, string queMedicamento) {
            return base.Channel.ActualizarAntecedentesQAsync(idAntecedenteQ, tuvoIntervencion, nroVeces, causaOperacion, alergias, queAlergias, sufreDiabetes, sufreEpilepsia, sufreHipertension, otrasEnfermedades, medicamentos, queMedicamento);
        }
    }
}
